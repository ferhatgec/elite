required_version is 0.1

set ProjectName as "Elite"

set COMPILER    as "gcc"
set fn          as "for"
set commandline as "argument"
set echo        as "println"
set make_arg    as "make"

set Linux       as "linux"
set FreeBSD     as "freebsd"

set HOME        as env "HOME"

set COMPILER_PATH as "/usr/bin/{COMPILER}"

set LINKS    as link "stdc++fs"
set STANDARD as std  "c++17"

set sources as "example.cpp"
use add_source sources "test.cpp"

\\set arguments as string (
\\    "example.cpp",
\\    "main.cpp"
\\)

\\ set flags as string (
\\    f("curl")
\\)

// Start signal
$fn signal "start" [
    use append ProjectName "build"

    $echo "test.cpp file added: {sources}"

    // Do not use like this comments, Elite ignores them with warning message.
    $echo "Hello, {ProjectName}!"

    println "Default compiler is: {COMPILER}"

    set echo as "print"

    $echo "Huh!"

    set echo as "println"

    \\ Prints newline
    $echo

    $echo $HOME

    if eq "{ProjectName}" "Elitebuild" [
        println "ProjectName checked."
    ]

    if uneq "{COMPILER}" "gcc" [
        println "Your compiler seemsly not GCC, unoptimized."
    ]

    if uneq "{HOME}" env "PWD" [
        println "Current directory isn't {HOME}!"
        print   "Current dir is: " println env "PWD"
    ]

    \\ You can also use $ProjectName instead of formatter

    \\ Platform-specific functions.
    $fn specific "{Linux}"   [
        for exists "{COMPILER_PATH}" [
            println "Compiler path found: {COMPILER_PATH} {LINKS} {STANDARD}"
        ]

        println "Linux-based"
    ]

    for $commandline "{make_arg}" [
        println "There's nothing to do."
    ]

    for argument "hi" [
        println "Hi!"
    ]

    for specific "{FreeBSD}" [
        println "{FreeBSD}"
    ]

    \\for argument("make") [
    \\    for specific("linux") [
    \\        use commandline(
    \\            $COMPILER,
    \\            $arguments,
    \\            $flags
    \\        )

    \\        print "hello, world"
    \\
    \\        use commandline(
    \\            "echo",
    \\            "hello, world"
    \\        )
    \\    ]
    \\]

    \\ {...} default formatter
    for specific "{Linux}"   [ use exec   "echo Hello, Elitebuild from syscall! (for Linux-based)" ]

    for specific "{FreeBSD}" [ use exec   "echo Hello, Elitebuild from syscall! (for FreeBSD)" ]

    for specific "{Linux}"   [ use exec   "uname --a" ]

    for specific "linux"     [ use signal "exit" ]
]